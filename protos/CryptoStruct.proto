/*----------------------------------------------------------------
// Copyright (C) 2018 奇安信科技集团 版权所有。
//
// 文件名：Struct.proto
// 文件功能描述：数据结构定义
//
// 创建者：wangaibing@qianxin.com
// 时间：2021-07-23
//
// 版本：V1.0.0
//----------------------------------------------------------------*/
syntax = "proto3";

import "Struct.proto";

// QuickSSL gRPC API
//
// QuickSSL gRPC 接口服务提供密钥管理和密码服务
package quick.api.grpc.v1;

option java_multiple_files = true;
option java_outer_classname = "QuickCryptoStruct";
option java_package = "org.quick.api.grpc.v1";
option go_package = "quick/api/grpc/v1;apigrpcv1";
option optimize_for = CODE_SIZE;


//**********************//
//防疫平台密码服务接口
//**********************//
//存储数据加密请求
message DataEncryptRequest {
    //数字信封ID，长度建议为32字节的UUID，须用户生成
    string enve_id     = 1;

    //接收者ID，格式如：100000，六位数字
    string receiver_id = 2;

    //明文数据
    bytes plain_text   = 3;
}

// 存储数据加密应答
message DataEncryptResponse {
    //加密后密文base64编码
    string cipher_text = 1;
}

//存储数据解密请求
message DataDecryptRequest {
    //数字信封ID
    string enve_id     = 1;

    //被解密密文base64编码
    string cipher_text = 2;
}

// 存储数据解密应答
message DataDecryptResponse {
    //解密后明文
    bytes plain_text = 1;
}

//**********************//
//防疫平台密码服务接口 end
//**********************//
    
//**********************//
// 标准服务接口
//**********************//
// 数字签名请求
message SignDataRequest {
    // 原文
    bytes plain_text = 1;
}

// 数字签名应答
message SignDataResponse {
    // 签名值
    bytes sign_text = 1;
}

// 验证数字签名请求,证书数据和证书ID同时存在,证书数据优先
message VerifySignedDataRequest {
    // 证书标识
    string cert_id               = 1;
    // 原文
    bytes plain_text             = 2;
    // 签名值
    bytes sign_text              = 3;
    // 证书数据,支持pem,der,base64
    bytes cert_data              = 4;
    // 证书验证级别
    VerifyCertLevel verify_level = 5;
}

// 验证数字签名应答
message VerifySignedDataResponse {
    // 验证结果
    bool verify_result = 1;
}

// 计算MAC请求
message CalculateMACRequest {
    // 共享密钥ID
    string key_id    = 1;
    // mac 算法,暂只支持QK_HMAC_SM3,QK_CBC_MAC_SM4
	MacAlg mac_alg   = 2;
    // 明文
    bytes plain_text = 3;
}

// 计算MAC应答
message CalculateMACResponse {
    bytes mac_text = 1;
}

// 验证MAC请求
message VerifyMACRequest {
    // 共享密钥ID
    string key_id    = 1;
    // mac 算法,暂只支持QK_HMAC_SM3,QK_CBC_MAC_SM4
	MacAlg mac_alg   = 2;
    // 明文
    bytes plain_text = 3;
    // mac值
    bytes mac_text   = 4;
}

// 验证MAC应答
message VerifyMACResponse {
    bool verify_result = 1;
}

// 对称加密请求
message SymmEncryptRequest {
    // key ID
    string key_id                      = 1;
    // mode 此参数已废弃
    // string mode                     = 2;
    // 明文数据
    bytes plain_text                   = 3;
    // 对称加密算法,暂只支持QK_SGD_SM4_ECB,QK_SGD_SM4_CBC,默认值为QK_SGD_SM4_ECB
    SymAlg sym_alg                     = 4;
    // IV初始向量,当sym_alg为QK_SGD_SM4_CBC时有效,默认值为全0
    bytes iv                           = 5;
    // padding填充模式,暂只支持QK_SYMALG_PADDING_NO,QK_SYMALG_PADDING_PKCS7,默认值为QK_SYMALG_PADDING_PKCS7
    SymAlgPaddingMode sym_padding      = 6;
}

// 对称加密应答
message SymmEncryptResponse {
    // 加密后密文
    bytes cipher_text = 1;
}

// 对称解密请求
message SymmDecryptRequest {
    // key ID
    string key_id                      = 1;
    // mode 此参数已废弃
    // string mode                     = 2;
    // 被解密密文
    bytes cipher_text                  = 3;
    // 对称加密算法,暂只支持QK_SGD_SM4_ECB,QK_SGD_SM4_CBC,默认值为QK_SGD_SM4_ECB
    SymAlg sym_alg                     = 4;
    // IV初始向量,当sym_alg为QK_SGD_SM4_CBC时有效,默认值为全0
    bytes iv                           = 5;
    // padding填充模式,暂只支持QK_SYMALG_PADDING_NO,QK_SYMALG_PADDING_PKCS7,默认值为QK_SYMALG_PADDING_PKCS7
    SymAlgPaddingMode sym_padding      = 6;
}

// 对称解密应答
message SymmDecryptResponse {
    // 解密后明文
    bytes plain_text = 1;
}

// 非对称加密请求
message AsymEncryptRequest {
    // 证书id
    string cert_id   = 1;
    // 待加密数据
    bytes plain_text = 2;
}

// 非对称加密应答
message AsymEncryptResponse {
    // 加密后密文
    bytes cipher_text = 1;
}

// 非对称解密请求
message AsymDecryptRequest {
    // 被解密密文
    bytes cipher_text = 1;
}

// 非对称解密应答
message AsymDecryptResponse {
    // 明文
    bytes plain_text = 1;
}

// 生成时间戳请求
message CreateTSRequest {
    bytes plain_text = 1;
}

// 生成时间戳应答
message CreateTSResponse {
    bytes ts_text = 1;
}

// 验证时间戳请求
message VerifyTSRequest {
    bytes ts_text = 1;
}

// 验证时间戳应答
message VerifyTSResponse {
    bool verify_result = 1;
}

// 解析时间戳信息请求
message GetTSDetailInfoRequest {
    bytes ts_text = 1;
    ItemNum item_num = 2;
}

// 解析时间戳信息应答
message GetTSDetailInfoResponse {
    bytes item_value = 1;
}

//**********************//
// 标准服务接口
//**********************//