//----------------------------------------------------------------
// Copyright (C) 2021 奇安信科技集团 版权所有
//
// 文件名：CryptoService.proto
// 文件功能描述：Quick SDK gRPC接口定义
//
// 版本：V1.0.0
//----------------------------------------------------------------
syntax = "proto3";

package quick.api.grpc.v1;

import "CryptoStruct.proto";

option java_multiple_files = true;
option java_outer_classname = "QuickCryptoService";
option java_package = "org.quick.api.grpc.v1";
option go_package = "quick/api/grpc/v1;apigrpcv1";
option optimize_for = CODE_SIZE;

// 密码服务SDK套件接口Quick Interface定义
//
// SDK服务套件提供以下能力：
// - 密码服务SDK套件提供数据加解密、签名验签、数字信封、摘要计算、随机数等接口服务能力；
// - 向下支持对接不同厂商的异构密码设备，并将密码设备进行会话级别（Session)的细粒度管理与调度；
// - 为应用开发提供支持包括C/C++、Java、Go、PHP、.Net、Shell等语言的密码服务接口调用；
// - 支持内置密码机软件模拟器，可方便开发人员进行应用无密码设备开发集成与调试；
// - 支持性能较好的gRPC接口。
service CryptoService {

    // 单步杂凑运算
    rpc Hash(HashRequest) returns(HashResponse){}

    // 多步杂凑运算初始化
    rpc HashInit(HashInitRequest) returns(HashInitResponse){}

    // 多步杂凑运算更新
    rpc HashUpdate(HashUpdateRequest) returns(HashUpdateResponse){}

    // 多步杂凑运算结果输出
    rpc HashFinal(HashFinalRequest) returns(HashFinalResponse){}

    // 单步消息认证码运算
    rpc Mac(MacRequest) returns(MacResponse){}

    // 多步消息认证码运算初始化
    rpc MacInit(MacInitRequest) returns(MacInitResponse){}

    // 多步消息认证码运算更新
    rpc MacUpdate(MacUpdateRequest) returns(MacUpdateResponse){}

    // 多步消息认证码运算结果输出
    rpc MacFinal(MacFinalRequest) returns(MacFinalResponse){}

    // 签名
    rpc Sign(SignRequest) returns(SignResponse){}

    // 验签
    rpc Verify(VerifyRequest) returns(VerifyResponse){}

    // 信封加密
    rpc EvpEncrypt(EvpEncryptRequest) returns(EvpEncryptResponse){}

    // 信封解密
    rpc EvpDecrypt(EvpDecryptRequest) returns(EvpDecryptResponse){}

    // 单步对称加密运算
    rpc Encrypt(EncryptRequest) returns(EncryptResponse){}

    // 多步对称加密运算初始化
    rpc EncryptInit(EncryptInitRequest) returns(EncryptResponse){}

    // 多步对称加密运算更新
    rpc EncryptUpdate(EncryptUpdateRequest) returns(EncryptUpdateResponse){}

    // 多步对称加密运算结果输出
    rpc EncryptFinal(EncryptFinalRequest) returns(EncryptFinalResponse){}

    // 单步对称解密运算
    rpc Decrypt(DecryptRequest) returns(DecryptResponse){}

    // 多步对称解密运算初始化
    rpc DecryptInit(DecryptInitRequest) returns(DecryptResponse){}

    // 多步对称解密运算更新
    rpc DecryptUpdate(DecryptUpdateRequest) returns(DecryptUpdateResponse){}

    // 多步对称解密运算结果输出
    rpc DecryptFinal(DecryptFinalRequest) returns(DecryptFinalResponse){}

    // 非对称加密
    rpc AsymEncrypt(AsymEncryptRequest) returns(AsymEncryptResponse){}

    // 非对称解密
    rpc AsymDecrypt(AsymDecryptRequest) returns(AsymDecryptResponse){}

    // 封装并导出密钥
    rpc WrapKey(WrapKeyRequest) returns(WrapKeyResponse){}

    // 导入并解封装密钥
    rpc UnwrapKey(UnwrapKeyRequest) returns(UnwrapKeyResponse){}

    // 密钥协商产生密钥交换参数
    rpc GenerateAgreementData(GenerateAgreementDataRequest) returns(GenerateAgreementDataResponse){}

    // 密钥协商产生密钥交换参数和key
    rpc GenerateAgreementDataAndKey(GenerateAgreementDataAndKeyRequest) returns(GenerateAgreementDataAndKeyResponse){}

    // 密钥协商产生密钥key
    rpc GenerateAgreementKey(GenerateAgreementKeyRequest) returns(GenerateAgreementKeyResponse){}

    //**********************//
    //防疫平台密码服务接口
    //**********************//
    // 存储数据加密运算
    rpc DataEncrypt(DataEncryptRequest) returns(DataEncryptResponse){}

    // 存储数据解密运算
    rpc DataDecrypt(DataDecryptRequest) returns(DataDecryptResponse){}

    // 信封加密
    rpc EvpKeyEncrypt(EvpKeyEncryptRequest) returns(EvpKeyEncryptResponse){}

    // 信封解密
    rpc EvpKeyDecrypt(EvpKeyDecryptRequest) returns(EvpKeyDecryptResponse){}
    //**********************//
    //防疫平台密码服务接口 end
    //**********************//

}



